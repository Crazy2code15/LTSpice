#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
 
typedef struct stirling_cache_tag {
    int max;
    int* values;
} stirling_cache;
 
int S2(stirling_cache* x, int n, int m) {
    if ((m == 0) & (n==0))
        return 1;
    if ((m <= 0) || (n<=0))
        return 0;
    return x->values[n*(n-1)/2 + m - 1];
}
 
bool stirling_cache_build(stirling_cache* x, int max) {
    int* values = calloc(max * (max + 1)/2, sizeof(int));
    if (values == NULL)
        return false;
    x->max = max;
    x->values = values;
    for (int n = 1; n <= max; ++n) {
        for (int m = 1; m < n; ++m) {
            int s1 = S2(x, n - 1, m - 1);
            int s2 = S2(x, n - 1, m);
            values[n*(n-1)/2 + m - 1] = s1 + s2 * m;
        }
    }
    return true;
}
 
void stirling_cache_clear(stirling_cache* x) {
    free(x->values);
    x->values = NULL;
}
 
void print_result(stirling_cache* x, int max) {
    printf("Stirling numbers of the second kind:\nn/m");
    for (int m = 0; m <= max; ++m)
        printf(m == 0 ? "%2d" : "%8d", m);
    printf("\n");
    for (int n = 0; n <= max; ++n) {
        printf("%2d ", n);
        for (int m = 0; m <= n; ++m)
            printf(m == 0 ? "%2d" : "%8d", S2(x, n, m));
        printf("\n");
    }
}
 
int main() {
    stirling_cache x = { 0 };
    const int max = 12;
    if (!stirling_cache_build(&x, max)) {
        fprintf(stderr, "Out of memory\n");
        return 1;
    }
    print_result(&x, max);
    stirling_cache_clear(&x);
    return 0;
}